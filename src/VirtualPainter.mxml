<?xml version="1.0" encoding="utf-8"?>
<mx:Application layout="absolute" minWidth="955" minHeight="600" 
				preloader="com.stdva.malibu.vpaint.Preloader" initialize="init()" backgroundAlpha="0"
	xmlns:swiz="http://swiz.swizframework.org"
	xmlns:mx="http://www.adobe.com/2006/mxml"> 
	
	<swiz:SwizConfig
		strict="true"
		beanLoaders="{ [ApplicationConfig] }"
		mediateBubbledEvents="true"
		/>
	
	<mx:Style>
		.myColorPicker { 
			 overSkin:Embed(skinClass="MyColorPicker");  
			 upSkin:Embed(skinClass="MyColorPicker");  
			 disabledSkin:Embed(skinClass="MyColorPicker");  
			 downSkin:Embed(skinClass="MyColorPicker");  
		}
	</mx:Style>
	
	<mx:Style source="global.css"/>
	

	
	<!--<mx:ColorPicker id="cp" styleName="myColorPicker"/>
	-->
	
	<mx:Script>
		<![CDATA[
			import com.stdva.malibu.AddToGalleryWindow;
			import com.stdva.malibu.AddedToGaleryWindow;
			import com.stdva.malibu.Fonts;
			import com.stdva.malibu.PainterWindow;
			import com.stdva.malibu.vpaint.BDDrawTool;
			import com.stdva.malibu.vpaint.BMPDrawTool;
			import com.stdva.malibu.vpaint.ColorFillTool;
			import com.stdva.malibu.vpaint.DrawingParams;
			import com.stdva.malibu.vpaint.FillTool;
			import com.stdva.malibu.vpaint.GUIListener;
			import com.stdva.malibu.vpaint.MaskColorPicker;
			import com.stdva.malibu.vpaint.MyColorPickerController;
			import com.stdva.malibu.vpaint.Preloader;
			import com.stdva.malibu.vpaint.ToolSet;
			import com.stdva.malibu.vpaint.ToolTypes;
			
			import mx.controls.ColorPicker;
			import mx.controls.Text;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			
			import org.swizframework.Swiz;
			
			private var _painterWindow : PainterWindow;
			private var _addedToStage : Boolean = false;
			
			[Autowire]
			public var  addToGalleryWindow : AddToGalleryWindow;
			
			[Autowire]
			public var addedWindow : AddedToGaleryWindow;
			
			[Autowire]
			public var drawingParams : DrawingParams;
			
			[Autowire]
			public var toolSet : ToolSet;
			
			public var colorPicker : MyColorPickerController;
			
			[Autowire]
			public var guiListener : GUIListener;
			
			private function initTools() : void {
				var brushes : Brushes = new Brushes();
				
				var toolsMap : Object  = {};
				var pattern:RegExp = /([a-z]{1,2})(\d{1,2})/;

				for( var i : int = 0; i < brushes.numChildren; ++i ) {
					var child : DisplayObject = brushes.getChildAt( i );
					
					var result : Object = pattern.exec( child.name );
					
					if( result != null ) {
						
						group = result[1];
						var order : Number = result[2];
						
						if( toolsMap[ group ] == null ) {
							toolsMap[ group ] = [];
						}
						toolsMap[ group ][ order ] = child;
					}
				}
				
				for( var group : String in toolsMap ) {
					for( i = 0; i < toolsMap[ group ].length; ++i ) {
						if( toolsMap[ group ][i] != null ) {
							
//							trace( group, ' ', i, ' ', toolsMap[ group ][i] );
							
							if (group == "b" )
							{
								var tool : BDDrawTool = new BDDrawTool();
								tool.type = ToolTypes.BRUSH;
								tool.brushSampleSprite = toolsMap[ group ][i];

								toolSet.tools.push( tool  );
								Swiz.autowire(tool);
							}
							else
							if (group == "rp")
							{
								var bmpTool : BMPDrawTool = new BMPDrawTool();
								bmpTool.type = ToolTypes.READY_BITMAP;
								bmpTool.brushSampleSprite = toolsMap[ group ][i];
								bmpTool.initialize();
								toolSet.tools.push( bmpTool  );
								Swiz.autowire(bmpTool);
							}
							else
							if (group == "fl")
							{
								var fillTool : FillTool = new FillTool();
								fillTool.type = ToolTypes.FILL;
								fillTool.brushSampleSprite = toolsMap[ group ][i];
								fillTool.initialize();
								toolSet.tools.push( fillTool  );
								Swiz.autowire(fillTool);
							}
							else
								if (group == "cf")
								{
									var fillTool2 : ColorFillTool = new ColorFillTool();
									fillTool2.type = ToolTypes.COLOR_FILL;
									fillTool2.brushSampleSprite = toolsMap[ group ][i];
									fillTool2.initialize();
									toolSet.tools.push( fillTool2  );
									Swiz.autowire(fillTool2);
								}
							else
							if (group == "fb" )
							{
								var fbTool : BDDrawTool = new BDDrawTool();
								fbTool.type = ToolTypes.FIGURE_BRUSH;
								fbTool.brushSampleSprite = toolsMap[ group ][i];	
								toolSet.tools.push( fbTool  );
								Swiz.autowire(fbTool);
							}
						
							//toolSet.addTool(group, toolsMap[ group ][i]);
							//toolSet.tools.push( toolsMap [ group ] [i]  )
						
						}
					}
				}
				guiListener.onBrushes(null);
				
			} 
			
			[Autowire]
			public function set painterWindow( window : PainterWindow ) : void {
				
				initTools();
				
				_painterWindow = window;
				
				//trace( window.width );
				//trace( window.height );
				
				rawChildren.addChild( _painterWindow );
				
			
/////////////////////////////////////////////////////////				
				/*
				colorPicker = new MaskColorPicker();
				_painterWindow.settings.picker.visible = false;
				
				colorPicker.width=0;
				colorPicker.height=0;
				colorPicker.styleName="myColorPicker";
				
				
				//_painterWindow.settings.addChild(colorPicker);
				//rawChildren.
				addChild(colorPicker);*/
//////////////////////////////////////////////////////////////////
				colorPicker = new MyColorPickerController();
				colorPicker.x = _painterWindow.settings.pickerPlace.x;
				colorPicker.y = _painterWindow.settings.pickerPlace.y;
				 _painterWindow.settings.addChild(colorPicker);	
				
				
				/*
				var bd : BitmapData;
				bd.threshold(
				*/
				
				//_painterWindow.addChild(colorPicker);
				drawingParams.color = colorPicker.selectedColor;
				
				//layoutPicker();
				
				colorPicker.addEventListener(ColorPickerEvent.CHANGE,function (e:*) : void 
				{
					drawingParams.color = colorPicker.selectedColor;
				});
			
				
				setUpFonts();
			}
			
			private function setUpFonts() : void {
				for( var i : int = 0; i < _painterWindow.numChildren; ++i ) {
					var menu_items : Array = ["brushes", "figure_brushes", "ready_pictures", "fill", "fonts", "upload_picture"];
					var child : DisplayObject = _painterWindow.getChildAt( i );
					
					if( menu_items.indexOf( child.name ) == -1 ) continue;
					
					for each( var label : String in ["selected_label","normal_label"] ) {
						Fonts.apply( child[label], "HeliosCondC-Bold" );
						child[label].text = child[label].text;
						
					}
				}
				
			}
			/*
			public function layoutPicker () : void
			{
				var settingsPoint : Point = new Point (_painterWindow.settings.picker.x, _painterWindow.settings.picker.y );
				var stagePoint : Point = _painterWindow.settings.localToGlobal(settingsPoint);
				var painterWindowPoint : Point = _painterWindow.globalToLocal(stagePoint);
				colorPicker.x = painterWindowPoint.x;
				colorPicker.y = painterWindowPoint.y+ _painterWindow.settings.picker.height;
			}
			
			public function hidePicker () : void
			{
				colorPicker.visible = false;
				_painterWindow.settings.colorLabel.visible = false;
			}
			public function showPicker() : void
			{
				if (colorPicker)
					colorPicker.visible = true;
				if (_painterWindow)
					_painterWindow.settings.colorLabel.visible = true;
			}
			*/
			public function init() : void
			{
				Fonts.showEmbeddedFonts();
			}
			
			public function set showAddToGallery (b : Boolean) : void
			{
				if (b)
				{
					addToGalleryWindow.x = _painterWindow.lilWindowPlace.x ;
					addToGalleryWindow.y = _painterWindow.lilWindowPlace.y;
					rawChildren.addChild(addToGalleryWindow);
				}
				else
				{
					rawChildren.removeChild(addToGalleryWindow);
				}
			}
			public function set showAddedToGallery (b : Boolean) : void
			{
				if (b)
				{
					addedWindow.x = _painterWindow.lilWindowPlace.x ;
					addedWindow.y = _painterWindow.lilWindowPlace.y;
					rawChildren.addChild(addedWindow);
				}
				else
				{
					rawChildren.removeChild(addedWindow);
				}
			}
			

		]]>
	</mx:Script>
	
</mx:Application>

