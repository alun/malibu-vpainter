<?xml version="1.0" encoding="utf-8"?>
<mx:Application layout="absolute" minWidth="955" minHeight="600"
				usePreloader="false"
	xmlns:swiz="http://swiz.swizframework.org"
	xmlns:mx="http://www.adobe.com/2006/mxml"> 
	
	<swiz:SwizConfig
		strict="true"
		beanLoaders="{ [ApplicationConfig] }"
		mediateBubbledEvents="true"
		/>
	
	<mx:Style>
		.myColorPicker { 
			 overSkin:Embed(skinClass="MyColorPicker");  
			 upSkin:Embed(skinClass="MyColorPicker");  
			 disabledSkin:Embed(skinClass="MyColorPicker");  
			 downSkin:Embed(skinClass="MyColorPicker");  
		}
	</mx:Style>
	
	<mx:Style source="global.css"/>
	

	
	<!--<mx:ColorPicker id="cp" styleName="myColorPicker"/>
	-->
	
	<mx:Script>
		<![CDATA[
			import com.stdva.malibu.PainterWindow;
			import com.stdva.malibu.vpaint.BDDrawTool;
			import com.stdva.malibu.vpaint.DrawingParams;
			import com.stdva.malibu.vpaint.GUIListener;
			import com.stdva.malibu.vpaint.MaskColorPicker;
			
			import mx.controls.ColorPicker;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			
			private var _painterWindow : PainterWindow;
			private var _addedToStage : Boolean = false;
			
			[Autiwire]
			public var guiListener : GUIListener;
			
			[Autowire]
			public var drawingParams : DrawingParams;
			
			private var colorPicker : ColorPicker;
			
			
			private function initTools() : void {
				var brushes : Brushes = new Brushes();
				
				var toolsMap : Object  = {};
				var pattern:RegExp = /([a-z]{1,2})(\d{1,2})/;

				for( var i : int = 0; i < brushes.numChildren; ++i ) {
					var child : DisplayObject = brushes.getChildAt( i );
					
					var result : Object = pattern.exec( child.name );
					
					if( result != null ) {
						
						group = result[1];
						var order : Number = result[2];
						
						if( toolsMap[ group ] == null ) {
							toolsMap[ group ] = [];
						}
						toolsMap[ group ][ order ] = child;
					}
				}
				
				for( var group : String in toolsMap ) {
					for( i = 0; i < toolsMap[ group ].length; ++i ) {
						if( toolsMap[ group ][i] != null ) {
							// добавить в тулзы
							trace( group, ' ', i, ' ', toolsMap[ group ][i] );
						}
					}
				}
			} 
			
			[Autowire]
			public function set painterWindow( window : PainterWindow ) : void {
				
				initTools();
				
				_painterWindow = window;
				
				//trace( window.width );
				//trace( window.height );
				
				rawChildren.addChild( _painterWindow );
				
				colorPicker = new MaskColorPicker();
				_painterWindow.settings.picker.visible = false;
				
				colorPicker.width=0;
				colorPicker.height=0;
				colorPicker.styleName="myColorPicker";
				
				
				//_painterWindow.settings.addChild(colorPicker);
				//rawChildren.
				addChild(colorPicker);
				
				//_painterWindow.addChild(colorPicker);
				drawingParams.color = colorPicker.selectedColor;
				
				layoutPicker();
				
				colorPicker.addEventListener(ColorPickerEvent.CHANGE,function (e:*) : void 
				{
					drawingParams.color = colorPicker.selectedColor;
				});
				
				_painterWindow.backActive.visible = false;
				_painterWindow.forwardActive.visible = false;
			
				
			}
			
			public function layoutPicker () : void
			{
				var settingsPoint : Point = new Point (_painterWindow.settings.picker.x, _painterWindow.settings.picker.y );
				var stagePoint : Point = _painterWindow.settings.localToGlobal(settingsPoint);
				var painterWindowPoint : Point = _painterWindow.globalToLocal(stagePoint);
				colorPicker.x = painterWindowPoint.x;
				colorPicker.y = painterWindowPoint.y+ _painterWindow.settings.picker.height;
			}

		]]>
	</mx:Script>
	
</mx:Application>

